

shader TransformationBlendShape : TransformationBase, PositionStream4, Transformation,NormalStream
{
    cbuffer PerDraw
    {
       stage float4x4 BSHAPEDATA[MAT_COUNT]; 
    }
 
  stage stream uint VertexID : SV_VertexID;



float4x4 CreateTranslation(float4 translation) {
    return float4x4(
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        translation.x, translation.y, translation.z, 1.0f
    );
}


 void DivideAndModulo(int dividend, int divisor, out int quotient, out int remainder)
{
     quotient = dividend / divisor;
     remainder=dividend- (quotient*divisor);
}

 float4 GetValueInBMAT(int counter)
{
    int quotient = 0;
    int remainder = 0;
   DivideAndModulo(counter, 4, quotient, remainder);        
    return BSHAPEDATA[quotient][remainder];           
}

  float4x4 ApplyBlendshapes(int vID, float4 originalPosition)
  {
     float4 morphImact=GetValueInBMAT(vID); 
     float4x4  blendMat=CreateTranslation(morphImact); 
     return blendMat;
  }


  override stage void PreTransformPosition()
    {
   //  float4x4 transMat= ApplyBlendshapes(streams.VertexID, streams.Position);
    // float4 blendPos = mul(float4(streams.Position.xyz, 1.0f),transMat);    
    // streams.Position = blendPos; 
    //streams.Position=float4(streams.Position[0],streams.Position[1],streams.Position[2],streams.Position[3]);
	base.PreTransformPosition();
    }
};
