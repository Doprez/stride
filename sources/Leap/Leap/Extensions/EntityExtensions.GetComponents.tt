<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Stride.Engine;

namespace Leap.Extensions;

/// <summary>
/// This class is auto-generated by the <c>EntityExtensions.GetComponents.tt</c> T4 template.
/// Any manual changes made to this file will be lost when the code is regenerated.
/// To modify the functionality, update the <c>EntityExtensions.GetComponents.tt</c> template instead.
/// </summary>
public static partial class EntityExtensions
{
<# foreach(var i in Enumerable.Range(2,15))  {
var genericArgs = Enumerable.Range(1, i).Select(t => $"TComponent{t}").ToList();

#>
    /// <summary>
    /// Gets <#= NumberToWords(i) #> specified components from the entity.
    /// </summary>
<# foreach(var targ in genericArgs)  { #>
    /// <typeparam name="<#= targ #>">The type of the <#= NumberToOrdinalWords(Int32.Parse(targ.Replace("TComponent",""))) #> component to retrieve.</typeparam>
<#}#>
    /// <param name="entity">The <see cref="Entity"/> from which the components are retrieved.</param>
    /// <returns>A tuple containing the <#= NumberToWords(i) #> components, which may be <c>null</c> if they do not exist.</returns>
    /// <exception cref="ArgumentNullException">Thrown when the <paramref name="entity"/> is <c>null</c>.</exception>
    public static (<#= String.Join("?, ", genericArgs) #>?) Get<<#= String.Join(", ", genericArgs) #>>(this Entity entity)
<# foreach(var targ in genericArgs)  { #>
        where <#= targ #> : EntityComponent
<#}#>
    {
        ArgumentNullException.ThrowIfNull(entity);

        return (<#= String.Join(", ", genericArgs.Select(t => $"entity.Get<{t}>()")) #>);
    }

<#}#>
}<#+
private static string NumberToWords(int number)
{
    if (number == 0)
        return "zero";

    if (number < 0)
        return "minus " + NumberToWords(Math.Abs(number));

    string words = "";

    if ((number / 1000000) > 0)
    {
        words += NumberToWords(number / 1000000) + " million ";
        number %= 1000000;
    }

    if ((number / 1000) > 0)
    {
        words += NumberToWords(number / 1000) + " thousand ";
        number %= 1000;
    }

    if ((number / 100) > 0)
    {
        words += NumberToWords(number / 100) + " hundred ";
        number %= 100;
    }

    if (number > 0)
    {
        if (words != "")
            words += "and ";

        var unitsMap = new[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
        var tensMap = new[] { "zero", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };

        if (number < 20)
            words += unitsMap[number];
        else
        {
            words += tensMap[number / 10];
            if ((number % 10) > 0)
                words += "-" + unitsMap[number % 10];
        }
    }

    return words;
}

private static string NumberToOrdinalWords(int number)
{
    var words = NumberToWords(number);
    var lastWord = words.Split(' ').Last();

    var specialCase = new Dictionary<string, string>()
    {
        {"one", "first"},
        {"two", "second"},
        {"three", "third"},
        {"five", "fifth"},
        {"eight", "eighth"},
        {"twelve", "twelfth"},
        {"nine", "ninth"},
    };

    if(specialCase.TryGetValue(lastWord, out var replacement))
    {
        return ReplaceLastOccurrence(words, lastWord, replacement);
    }


    replacement = lastWord;

    if(replacement.EndsWith("y"))
    {
        replacement = ReplaceLastOccurrence(replacement, "y", "ie");
    }

    return ReplaceLastOccurrence(words, lastWord, replacement + "th");
}

private static string ReplaceLastOccurrence(string source, string oldValue, string newValue)
{
        int place = source.LastIndexOf(oldValue);

        if(place == -1)
           return source;

        string result = source.Remove(place, oldValue.Length).Insert(place, newValue);
        return result;
}
#>